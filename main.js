!function(){"use strict";const e=document.querySelector("#card-template").content.querySelector(".card__gallery"),t=(document.querySelector(".card__area"),document.querySelector(".gallery__pencil")),n=(document.querySelectorAll(".popup__close"),document.querySelector(".popup__button"),document.querySelector(".gallery__button")),r=document.getElementById("form__edit"),i=document.getElementById("form__place"),o=(document.querySelector(".popup__input_type_card-link"),document.querySelector(".button_active"),document.querySelector(".popup__title-foto"),document.querySelector(".card__image"),document.forms.profile.elements.name),s=(document.querySelector(".gallery__header"),document.forms.profile.elements.title),l=(document.querySelector(".gallery__subtext"),document.querySelector("#closeButtonFoto"),{formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"});function a(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class c{constructor(e){a(this,"_handleEscClose",(e=>{e.preventDefault(),"Escape"===e.key&&this.close()})),a(this,"_handlecloseOverlay",(()=>{this.close()})),this._popup=document.querySelector(e),this._closeOverlay=document.querySelector(".page__background"),this.close.bind(this),this._handlecloseOverlay}open(){document.addEventListener("keyup",this._handleEscClose),this._popup.classList.add("popup_opened"),this._closeOverlay.classList.add("page__background_opened")}close(){this._popup.classList.remove("popup_opened"),this._closeOverlay.classList.remove("page__background_opened"),document.removeEventListener("keyup",this._handleEscClose)}setEventListener(){this._closeOverlay.addEventListener("click",this._handlecloseOverlay.bind(this)),this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains(".popup")||e.target.classList.contains("popup__close"))&&this.close()}))}}class u extends c{constructor(e,t){super(e),this._submitCallback=t,this._form=this._popup.querySelector(".popup__form"),this._inputSelector=".popup__input"}getInputValues(){const e=Array.from(this._form.querySelectorAll(this._inputSelector)),t={};return e.forEach((e=>{e.name&&(t[e.name]=e.value)})),t}setEventListener(){this._form.addEventListener("submit",(e=>{e.preventDefault();const t=this.getInputValues();this._submitCallback(t),this.close()})),super.setEventListener()}close(){this._form.reset(),super.close()}}class _{constructor(e,t){this._config=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector)),this._buttonElement=this._formElement.querySelector(this._config.submitButtonSelector)}_showInputError(e,t){const n=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._config.inputErrorClass),n.textContent=t,n.classList.add(this._config.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._config.inputErrorClass),t.classList.remove(this._config.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_toggleButtonState(){this._inputList.every((e=>e.validity.valid))?(this._buttonElement.removeAttribute("disabled"),this._buttonElement.classList.remove(this._config.inactiveButtonClass)):(this._buttonElement.setAttribute("disabled",!0),this._buttonElement.classList.add(this._config.inactiveButtonClass))}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}}class d{constructor(e){let{name:t,link:n,cardTemplate:r,handleCardClick:i}=e;this._name=t,this._link=n,this._cardTemplate=r,this._handleCardClick=i,this._element=this._getTemplate(),this._cardLinkTitle=this._element.querySelector(".card__ellipsis"),this._cardLinkInput=this._element.querySelector(".card__image"),this._cardLinkTitle.textContent=this._name,this._cardLinkInput.src=this._link,this._cardLinkInput.alt=`Photo of ${this._name}`,this._heartButton=this._element.querySelector("#heart"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._setEventListeners()}_setEventListeners(){this._heartButton.addEventListener("click",this._toggleLike.bind(this)),this._cardLinkInput.addEventListener("click",this._setBigImage.bind(this)),this._deleteButton.addEventListener("click",this._handleDeleteClick.bind(this))}_getTemplate(){return this._cardTemplate.cloneNode(!0)}_setBigImage(){this._handleCardClick({link:this._link,name:this._name})}_toggleLike(){this._heartButton.classList.toggle("card__background_active")}_handleDeleteClick(){this._element.remove()}getElement(){return this._element}}const p=new u(".popup_type_edit-profile",((e,t)=>{y.setUserInfo(e,t)})),m=new u(".popup_type_add-card",(t=>{!function(){const t=m.getInputValues(),n=g(t.nameNew,t.titleURL,e);v.addItem(n),m.close()}()})),h=new class extends c{constructor(e){var t,n,r;super(e),t=this,r=e=>{let{name:t,link:n}=e;super.open(),this._newCardLinkTitle=document.querySelector(".popup__title-foto"),this._popup.style="background-image: url("+n+" )",this._newCardLinkTitle.textContent=t},(n=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(n="open"))in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r}}(".popup_type_foto");n.addEventListener("click",(()=>{f.resetValidation(),m.open()})),t.addEventListener("click",(()=>{const e=y.getUserInfo();p.open(),o.value=e.name,s.value=e.job,b.resetValidation()}));const y=new class{constructor(e){let{nameSelector:t,jobSelector:n}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(n)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){let{name:t,title:n}=e;this._nameElement.textContent=t,this._jobElement.textContent=n}}({nameSelector:".gallery__header",jobSelector:".gallery__subtext"});function g(e,t,n){return new d({name:e,link:t,cardTemplate:n,handleCardClick:h.open}).getElement()}p.setEventListener(),h.setEventListener(),m.setEventListener();const v=new class{constructor(e,t){let{items:n,renderer:r}=e;this._items=n,this._renderer=r,this._containerWrapper=document.querySelector(t)}renderItems(){this._items.forEach((e=>{const t=this._renderer(e);this.addItem(t)}))}addItem(e){this._containerWrapper.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:t=>g(t.name,t.link,e)},".card__area");v.renderItems();const b=new _(l,r),f=new _(l,i);b.enableValidation(),f.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,